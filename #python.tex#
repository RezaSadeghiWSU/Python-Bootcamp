\documentclass[10pt]{beamer}
\usetheme{Singapore}
\usecolortheme{default}
\usecolortheme{orchid}
\useoutertheme{infolines}
\useinnertheme[shadow=true]{rounded}

\newcommand\tinyfont{\fontsize{4pt}{7.2}\selectfont}
\newcommand\smallfont{\fontsize{8pt}{7.2}\selectfont}
\newcommand\regfont{\fontsize{10pt}{7.2}\selectfont}

\usepackage{multimedia}
\usepackage{listings}
\usepackage{courier}

\usepackage{color}
 
\definecolor{codegreen}{rgb}{0,0.6,0}
\definecolor{codegray}{rgb}{0.5,0.5,0.5}
\definecolor{codepurple}{rgb}{0.58,0,0.82}
\definecolor{backcolour}{rgb}{0.95,0.95,0.92}

%basicstyle=\footnotesize,
\lstdefinestyle{mystyle}{
    basicstyle=\ttfamily,
    backgroundcolor=\color{backcolour},   
    commentstyle=\color{codegreen},
    keywordstyle=\color{magenta},
    numberstyle=\tiny\color{codegray},
    stringstyle=\color{codepurple},
    breakatwhitespace=false,         
    breaklines=true,                 
    captionpos=b,                    
    keepspaces=true,                 
    numbers=none,                    
    numbersep=5pt,                  
    showspaces=false,                
    showstringspaces=false,
    showtabs=false,                  
    tabsize=2
}
 
\lstset{style=mystyle}

%\lstset{basicstyle=\footnotesize\ttfamily,breaklines=true}

\title{Introduction to Python}
\titlegraphic{\includegraphics[height=2.0cm]{../logo.png}}
\logo{\includegraphics[height=0.5cm]{../logo.png}}
\author{{Stephen Weston} \and {Robert Bjornson}}
\institute[Yale]{
  Yale Center for Research Computing \\
  Yale University
}
\date{Jan 2017}
\begin{document}


%----------- titlepage ----------------------------------------------%
\begin{frame}[plain]
  \titlepage
\end{frame}

%----------- slide --------------------------------------------------%
\begin{frame}[fragile]
\frametitle{What is the Yale Center for Research Computing?}

\begin{itemize}
\item Independent center under the Provost's office
\item Created to support your research computing needs
\item Focus is on high performance computing and storage
\item \textasciitilde 15 staff, including applications specialists and system engineers
\item Available to consult with and educate users
\item Manage compute clusters and support users
\item Located at 160 St. Ronan st, at the corner of Edwards and St. Ronan
\item http://research.computing.yale.edu
\end{itemize}

\end{frame}

%----------- slide --------------------------------------------------%
\begin{frame}
\frametitle{Why Python?}

\begin{itemize}
\item Free, portable, easy to learn
\item Wildly popular, huge and growing community
\item Intuitive, natural syntax
\item Ideal for rapid prototyping but also for large applications
\item Very efficient to write, reasonably efficient to run as is
\item Can be very efficient (numpy, cython, ...)
\item Huge number of packages (modules)
\end{itemize}
\end{frame}

%----------- slide --------------------------------------------------%
\begin{frame}
\frametitle{You can use Python to...}
\begin{itemize}
\item Convert or filter files
\item Automate repetitive tasks
\item Compute statistics
\item Build processing pipelines
\item Build simple web applications
\item Perform large numerical computations
\item ...
\end{itemize}

You can use Python instead of bash, Java, or C
\vspace{2mm}

Python can be run interactively or as a program
\end{frame}

%----------- slide --------------------------------------------------%
\begin{frame}[fragile]
\frametitle{Several different ways to run Python}
\begin{itemize}
\item Create a file using editor, then:
\\
\verb|$ python myscript.py |

\item Run interpreter interactively
\\
\verb|$ python |

\item Use a python environment, e.g. Anaconda
\end{itemize}
\end{frame}

%----------- slide --------------------------------------------------%
\begin{frame}
\frametitle{Overview of topics}
\begin{itemize}
\item Some python data types and control statements
\item Examples of python in action
\item The Anaconda python environment
\item Numerical computation in python
\item Resources
\end{itemize}
\end{frame}
%----------- slide --------------------------------------------------%
\begin{frame}[fragile]
\frametitle{Basic Python Types and Assignment}

\smallfont
\begin{verbatim}
>>> radius=2
>>> pi=3.14
>>> diam=radius*2
>>> area=pi*(radius**2)
>>> title="fun with strings"
>>> pi="cherry"
>>> longnum=31415926535897932384626433832795028841971693993751058\
2097494459230781640628620899862803482534211706798214808651
>>> delicious=True
\end{verbatim}

\begin{itemize}
\item variables do not need to be declared or typed
\item integers and floating points can be used together
\item the same variable can hold different types
\item lines can be broken using \textbackslash
\item python supports arbitrary length integer numbers
\end{itemize}
\end{frame}

%----------- slide --------------------------------------------------%
\begin{frame}[fragile]
\frametitle{Other Python Types: lists}

Lists are like arrays in other languages.  
\begin{verbatim}
>>> l=[1,2,3,4,5,6,7,8,9,10]
>>> l[5]
6
>>> l[3:5]
[4, 5]
>>> l[5:]
[6, 7, 8, 9, 10]
>>> l[5:-3]
[6, 7]
>>> l[2]=3.145
>>> l[3]="pi"
>>> l
[1, 2, 3.145, 'pi', 5, 6, 7, 8, 9, 10]
>>> len(l)
10
\end{verbatim}

\end{frame}

%----------- slide --------------------------------------------------%
\begin{frame}[fragile]
\frametitle{Lists continued}

Lists are more flexible than arrays, e.g.:
\begin{itemize}
\item Insert or append new elements
\item remove elements
\item nest lists
\item combine values of different types into lists
\end{itemize}

\begin{verbatim}
>>> l=[1,2,3,4,5,6,7,8,9]
>>> l+[11,12,13]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13]
>>> l[3:6]=['four to six']
>>> l
[1, 2, 3, 'three to six', 7, 8, 9]
\end{verbatim}

\end{frame}

%----------- slide --------------------------------------------------%
\begin{frame}[fragile]
\frametitle{Tuples}

Tuples are similar to lists, but cannot be modified.
\begin{verbatim}
>>> t=(1,2,3,4,5,6,7,8,9)
>>> t[4:6]
(5, 6)
>>> t[6]="changeme"
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
>>> t.append('more')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'tuple' object has no attribute 'append'
\end{verbatim}
\end{frame}

%----------- slide --------------------------------------------------%
\begin{frame}[fragile]
\frametitle{Other Python Types: strings}

Strings are fully featured types in python.

\begin{verbatim}
>>> s="Donald"
>>> s[0:3]
'Don'
>>> s+" Duck"
'Donald Duck'
>>> s[0]="R"
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 's' object does not support item assignment
>>> len(s)
6
>>> s.upper()
'DONALD'
\end{verbatim}

Note:
\begin{itemize}
\item strings cannot be modified
\item strings can be concatenated and sliced much like lists
\item strings are objects with lots of useful methods
\end{itemize}

\end{frame}


%----------- slide --------------------------------------------------%
\begin{frame}[fragile]
\frametitle{Other Python Types: dictionaries}

Dicts are like hash tables in other languages.  
\begin{verbatim}
>>> coins={'penny':1, 'nickle':5, 'dime':10, 'quarter':25}
>>> coins['penny']
1
>>> coins.keys()
['quarter', 'nickle', 'penny', 'dime']
>>> coins.values()
[25, 5, 1, 10]
>>> coins['half']=50
>>> coins
{'quarter': 25, 'nickle': 5, 'penny': 1, 'half': 50, 'dime': 10}
>>> len(coins)
5
\end{verbatim}

Note:
\begin{itemize}
\item dicts associate keys with values, which can be of (almost) any type 
\item dicts have length, but are not ordered
\item looking up values in dicts is very fast, even if the dict is BIG.
\end{itemize}

\end{frame}

%----------- slide --------------------------------------------------%
\begin{frame}[fragile]
\frametitle{Control Flow Statements: if}

If statements allow you to do a test, and do something
based on the result:

\begin{verbatim}
>>> import random
>>> v=random.randint(0,100)
>>> if v < 50:
...    print 'got a little one', v
... else:
...    print 'got a big one', v
... 
got a big one 93
\end{verbatim}

Note that the else clause is optional.

\end{frame}

%----------- slide --------------------------------------------------%
\begin{frame}[fragile]
\frametitle{Control Flow Statements: while}

While statements execute one or more statements repeatedly until the 
test is false:

\begin{verbatim}
>>> import random
>>> count=0
>>> while count<100:
...    count=count+random.randint(0,10)
...    print count,
... 
5 11 19 19 21 28 35 37 47 53 53 57 58 59 60 66 71   
75 82 86 94 101 
\end{verbatim}

\end{frame}


%----------- slide --------------------------------------------------%
\begin{frame}[fragile]
\frametitle{Control Flow Statements: for}

For statements take some sort of iterable object and loop once for 
every value.

\begin{verbatim}
>>> for fruit in ['apple', 'orange', 'banana']:
...    print fruit, 
... 
apple orange banana
>>> for i in range(5):
...    print i,
... 
0 1 2 3 4 

\end{verbatim}

\end{frame}

%----------- slide --------------------------------------------------%
\begin{frame}[fragile]
\frametitle{Using for loops and dicts}
If you loop over a dict, you'll get just keys.  Use iteritems() for keys and values.

\smallfont
\begin{verbatim}
>>> for denom in coins:  print denom
... 
quarter
nickle
penny
dime
>>> for denom, value in coins.iteritems():  print denom, value
... 
quarter 25
nickle 5
penny 1
dime 10

\end{verbatim}
\end{frame}


%----------- slide --------------------------------------------------%
\begin{frame}[fragile]
\frametitle{Control Flow Statements: altering loops}

While and For loops can skip steps (continue) or terminate early (break).

\begin{verbatim}
>>> for i in range(10):
...    if i%2 != 0: continue
...    print i, 
... 
0 2 4 6 8
>>> for i in range(10):
...    if i>5: break
...    print i,
... 
0 1 2 3 4 5
\end{verbatim}

\end{frame}

%----------- slide --------------------------------------------------%
\begin{frame}[fragile]
\frametitle{Note on blocks of code}

In the previous example:
\begin{verbatim}
>>> for i in range(10):
...    if i>5: break
...    print i,
\end{verbatim}

How did we know that \textit{print i} was part of the loop?
\vspace{2mm}

Many programming languages use \{ \} or Begin End to delineate blocks of
code to treat as a single unit.
\vspace{2mm}

Python uses white space (blanks).  To define a block of code, indent the block.
\vspace{2mm}

By convention and for readability, indent a consistent number, 
usually 3 or 4 spaces.  Many editors will do this for you.

\end{frame}

%----------- slide --------------------------------------------------%
\begin{frame}[fragile]
\frametitle{Functions}

Functions allow you to write code once and use it many times.
\vspace{2mm}

Functions also hide details so code is more understandable.
\begin{verbatim}
>>> def area(w, h):
...    return w*h

>>> area(3, 4)
12
>>> area(5, 10)
50
\end{verbatim}

Some languages differentiate between functions and procedures.  In python, everything is a function.
Procedures are functions that return no values.

\end{frame}

%----------- slide --------------------------------------------------%
\begin{frame}[fragile]
\frametitle{Summary}
\begin{itemize}
\item 4 basic types: int, float, boolean, string
\item 3 complex types: list, dict, tuple
\item 4 control constructs: if, while, for, def
\end{itemize}
\end{frame}

%----------- slide --------------------------------------------------%
\begin{frame}[fragile]
\frametitle{File Formatter example}

Task: given a file of hundreds or thousands of lines:

\smallfont
\begin{verbatim}
FCID,Lane,Sample_ID,SampleRef,index,Description,Control,Recipe,...
160212,1,A1,human,TAAGGCGA-TAGATCGC,None,N,Eland-rna,Mei,Jon_mix10
160212,1,A2,human,CGTACTAG-CTCTCTAT,None,N,Eland-rna,Mei,Jon_mix10
160212,1,A3,human,AGGCAGAA-TATCCTCT,None,N,Eland-rna,Mei,Jon_mix10
160212,1,A4,human,TCCTGAGC-AGAGTAGA,None,N,Eland-rna,Mei,Jon_mix10
...
\end{verbatim}

Remove the last 3 letters from the 5th column:

\begin{verbatim}
FCID,Lane,Sample_ID,SampleRef,index,Description,Control,Recipe,...
160212,1,A1,human,TAAGGCGA-TAGAT,None,N,Eland-rna,Mei,Jon_mix10
160212,1,A2,human,CGTACTAG-CTCTC,None,N,Eland-rna,Mei,Jon_mix10
160212,1,A3,human,AGGCAGAA-TATCC,None,N,Eland-rna,Mei,Jon_mix10
160212,1,A4,human,TCCTGAGC-AGAGT,None,N,Eland-rna,Mei,Jon_mix10
...
\end{verbatim}
\end{frame}

%----------- slide --------------------------------------------------%
\begin{frame}[fragile]
\frametitle{File Formatter example (cont)}
\smallfont
In pseudocode we might write:
\begin{verbatim}
 open the input file
 read the first header line, and print it out
 for each remaining line in the file
   read the line
   find the value in the 5th column
   truncate it by removing the last three letters
   put the line back together
   print it out
\end{verbatim}
In Python:
\begin{verbatim}
import sys
fp=open(sys.argv[1])
print fp.readline().strip()
for l in fp:
   flds=l.strip().split(',')
   flds[4]=flds[4][:-3]
   print ','.join(flds)
\end{verbatim}
\end{frame}

%----------- slide --------------------------------------------------%
\begin{frame}[fragile]
\frametitle{File Formatter example (cont)}

\textit{open the input file}

\begin{verbatim}
import sys
fp=open(sys.argv[1])
\end{verbatim}

Sys is a system module with a number of useful methods.  
\vspace{2mm}

sys.argv() returns the command line as an array of strings.  
\vspace{2mm}

sys.argv[0] is the command, sys.argv[1] is the first
argument, etc.
\vspace{2mm}

Open takes a filename, and returns a ``file pointer''.  
\vspace{2mm}

We'll use that to read from the file.

\end{frame}

%----------- slide --------------------------------------------------%
\begin{frame}[fragile]
\frametitle{File Formatter example (cont)}

\textit{read the first header line, and print it out}

\begin{verbatim}
print fp.readline().strip()
\end{verbatim}

We'll call readline() on the file pointer to get a single line from the file.
(the header line).  
\vspace{2mm}

Strip() removes the return at the end of the line.
\vspace{2mm}

Then we print it.

\end{frame}

%----------- slide --------------------------------------------------%
\begin{frame}[fragile]
\frametitle{File Formatter example (cont)}

\textit{for each remaining line in the file}

\textit{read the line}


\begin{verbatim}
for l in fp:
  ...
\end{verbatim}

A file pointer is an example of an iterator.  
\vspace{2mm}

Instead of explicitly calling readline() for each line, we can just loop on the file 
pointer, getting one line each time. 
\vspace{2mm}

Since we already read the header, we 
won't get that line.

\end{frame}

%----------- slide --------------------------------------------------%
\begin{frame}[fragile]
\frametitle{File Formatter example (cont)}

\textit{find the value in the 5th column}

\textit{truncate it by removing the last three letters}

\begin{verbatim}
    flds=l.strip().split(',')
    flds[4]=flds[4][:-3]
\end{verbatim}

Just like before, we strip the return from the line.  
\vspace{2mm}

We split it into
individual elements where we find commas.  
\vspace{2mm}

The 5th field is referenced by
flds[4], since python starts indexing with 0.  [:-3] takes all characters
of the string until the last 3.
  
\end{frame}

%----------- slide --------------------------------------------------%
\begin{frame}[fragile]
\frametitle{File Formatter example (cont)}


\textit{put the line back together}

\textit{print it out}

\begin{verbatim}
    print ','.join(flds)
\end{verbatim}

Join takes a list of strings, and combines them into one string using the 
string provided. Then we just print that string.  
 
\end{frame}

%----------- slide --------------------------------------------------%
\begin{frame}[fragile]
\frametitle{File Formatter example (cont)}

Reviewing:

\begin{verbatim}
import sys
fp=open(sys.argv[1])
print fp.readline().strip()
for l in fp:
   flds=l.strip().split(',')
   flds[4]=flds[4][:-3]
   print ','.join(flds)
\end{verbatim}


We would invoke it like this:
\begin{verbatim}
$ python fixfile.py badfile.txt

$ python fixfile.py badfile.txt > fixedfile.txt
\end{verbatim}

\end{frame}

%----------- slide --------------------------------------------------%
\begin{frame}[fragile]
\frametitle{Some variations on the theme}

We could skip certain lines (with other than human in the 3rd column)
\vspace{2mm}

We could also specify the output file on the command line
\vspace{2mm}

\begin{verbatim}
import sys
fp=open(sys.argv[1])
ofp=open(sys.argv[2], 'w')
print >> ofp, fp.readline().strip()
for l in fp:
   flds=l.strip().split(',')
   if flds[3] != 'human': continue
   flds[4]=flds[4][:-3]
   print >> ofp, ','.join(flds)
\end{verbatim}
\end{frame}

%----------- slide --------------------------------------------------%
\begin{frame}[fragile]
\frametitle{Some variations on the theme}

We could operate on multiple input files
\begin{verbatim}
$ python fixfile.py badfile1.txt badfile2.txt badfile3.txt > fixedfile.txt
\end{verbatim}

\begin{verbatim}
import sys
wrotehdr=False
for f in sys.argv[1:]:
   fp=open(f)
   hdr=fp.readline().strip()
   if not wrotehdr:
      print hdr
      wrotehdr=True
   for l in fp:
      flds=l.strip().split(',')
      flds[4]=flds[4][:-3]
      print ','.join(flds)
\end{verbatim}
\end{frame}


%----------- slide --------------------------------------------------%
\begin{frame}[fragile]
\frametitle{Directory Walk Example}

Imagine you have a directory tree with many subdirectories.  
\vspace{2mm}

In those directories are files named *.fastq.  You want to:
\begin{itemize}
\item find them
\item compress them to fastq.qp using a program
\item delete them if the conversion was successful
\end{itemize}

In this example, we'll demonstrate:

\begin{itemize}
\item traversing an entire directory tree
\item executing a program on files in that tree
\item testing for successful program execution
\end{itemize}

\end{frame}

%----------- slide --------------------------------------------------%
\begin{frame}[fragile]
\frametitle{Directory walk example (cont)}
\smallfont
In pseudocode we might write:
\begin{verbatim}
 for each directory
   get a list of files in that directory
   for each file in that directory
     if that file's name ends with .fastq
       create a new file name with .qp added
       create a command to do the compression
       run that command and check for success
       if success
         delete the original
       else
         stop
\end{verbatim}

The conversion command is: quip -c file.fastq \textgreater file.fastq.qp 

\end{frame}

%----------- slide --------------------------------------------------%
\begin{frame}[fragile]
\frametitle{Using os.walk}

We need a way to traverse all the files and directories.
os.walk(dir) starts at dir and visits every subdirectory below it.
It returns a list of files and subdirectories at each subdirectory. 
\vspace{2mm}

For example, imagine we have the following dirs and files:

\smallfont
\begin{verbatim}
d1
d1/d2
d1/d2/f2.txt
d1/f1.txt
\end{verbatim}

This is how we use os.walk:

\smallfont
\begin{verbatim}
>>> import os
>>> for d, dirs, files in os.walk('d1'):
...   print d, dirs, files
... 
d1 ['d2'] ['f1.txt']
d1/d2 [] ['f2.txt']
\end{verbatim}
\end{frame}

%----------- slide --------------------------------------------------%
\begin{frame}[fragile]
\frametitle{Invoking programs from python}

The subprocess module has a variety of ways to do this.  
\vspace{2mm}

A very simple use is:

\smallfont
\begin{verbatim}

import subprocess

ret=subprocess.call(cmd, shell=True)

ret=subprocess.call('quip -c myfile.fastq > myfile.fastq.qp', shell=True)
\end{verbatim}

ret is 0 on success, non-zero error code on failure.

\end{frame}
%----------- slide --------------------------------------------------%
\begin{frame}[fragile]
\frametitle{Directory Walk Example (cont)}

\smallfont
\begin{verbatim}
import os, sys, subprocess
start=sys.argv[1]
for d, subdirs, files in os.walk(start):
    for f in files:
        if f.endswith('.fastq'):
            fn=d+'/'+f
            nfn=fn.replace('.fastq', '.fastq.qp')
            cmd='quip -c '+fn+' > '+nfn
            ret=subprocess.call(cmd, shell=True)
            if ret==0:
                if os.path.exists(nfn):
                    os.remove(fn)
            else:
                print "Failed on ", fn
                sys.exit(1)
\end{verbatim}

To run it, we'd do: \verb+$ python walk.py d1+

\end{frame}

%----------- slide --------------------------------------------------%
\begin{frame}[fragile]
\frametitle{Dictionary Example}

Dictionaries associate names with data, and allow quick retrieval by name.
\vspace{2mm}

By nesting dictionaries, powerful lookups are easy.
\vspace{2mm}

In this example, we'll:
\begin{itemize}
\item create a dict containing objects
\item load the objects with search data
\item use the dict to retrieve the appropriate object for a search
\item perform the search
\end{itemize}

\end{frame}

%----------- slide --------------------------------------------------%
\begin{frame}[fragile]
\frametitle{Dictionary Example (cont)}

We have a file describing the locations of genes:

\tinyfont
\begin{verbatim}
uc001aaa.3      chr1    +       11873   14409   11873   11873   3       11873,12612,13220,      12227,12721,14409,              uc001aaa.3
uc010nxr.1      chr1    +       11873   14409   11873   11873   3       11873,12645,13220,      12227,12697,14409,              uc010nxr.1
uc010nxq.1      chr1    +       11873   14409   12189   13639   3       11873,12594,13402,      12227,12721,14409,      B7ZGX9  uc010nxq.1
uc009vis.3      chr1    -       14361   16765   14361   14361   4       14361,14969,15795,16606,        14829,15038,15942,16765,                uc009vis.3
uc009vit.3      chr1    -       14361   19759   14361   14361   9       14361,14969,15795,16606,16857,17232,17914,18267,18912,  14829,15038,15947,16765,17055,17742,18061,18366,19759,          uc009vit.3
...
\end{verbatim}

\regfont
We have another file with dna sequences, and where they mapped:

\tinyfont
\begin{verbatim}
HWI-ST830:206:D2411ACXX:1:1114:6515:89952       401     chr1    10536   0       76M     =       222691803       222681343       TACCACCGAAATCTGTGCAGAGGAGAACGCAGCTCCGCCCTCGCGGT
GCTCTCCGGGTCTGTGCTGAGGAGAACGC   ##B<2DDDDDDDCCDCC@CC@C@282BBCCDDBDDFHIJJJIGJIIGIGFIGJJIJJJJJJJJHGGHHFFFFDCC@    XA:i:1  MD:Z:24C51      NM:i:1  XP:Z:chr1 222691803 76M NH:i:6CC:Z:=   CP:i:10536      HI:i:0
HWI-ST830:206:D2411ACXX:1:1114:6515:89952       177     chr1    10536   0       76M     chr3    197908818       0       TACCACCGAAATCTGTGCAGAGGAGAACGCAGCTCCGCCCTCGCGGTGCTCTCCG
GGTCTGTGCTGAGGAGAACGC   ##B<2DDDDDDDCCDCC@CC@C@282BBCCDDBDDFHIJJJIGJIIGIGFIGJJIJJJJJJJJHGGHHFFFFDCC@    XA:i:1  MD:Z:24C51      NM:i:1  XP:Z:chr3 197908818 76M NH:i:6  CC:Z:=CP:i:10536       HI:i:1
HWI-ST830:206:D2411ACXX:1:1114:6515:89952       401     chr1    10536   0       76M     chr4    120370019       0       TACCACCGAAATCTGTGCAGAGGAGAACGCAGCTCCGCCCTCGCGGTGCTCTCCG
GGTCTGTGCTGAGGAGAACGC   ##B<2DDDDDDDCCDCC@CC@C@282BBCCDDBDDFHIJJJIGJIIGIGFIGJJIJJJJJJJJHGGHHFFFFDCC@    XA:i:1  MD:Z:24C51      NM:i:1  XP:Z:chr4 120370019 76M NH:i:6  CC:Z:=CP:i:10536       HI:i:2
HWI-ST830:206:D2411ACXX:1:1114:6515:89952       433     chr1    10536   0       76M     chr9    141135264       0       TACCACCGAAATCTGTGCAGAGGAGAACGCAGCTCCGCCCTCGCGGTGCTCTCCG
GGTCTGTGCTGAGGAGAACGC   ##B<2DDDDDDDCCDCC@CC@C@282BBCCDDBDDFHIJJJIGJIIGIGFIGJJIJJJJJJJJHGGHHFFFFDCC@    XA:i:1  MD:Z:24C51      NM:i:1  XP:Z:chr9 141135264 76M NH:i:6  CC:Z:=CP:i:10536       HI:i:3
...
\end{verbatim}

\regfont

We'd like to be able to quickly determine the genes overlapped by a dna sequence.

\end{frame}

%----------- slide --------------------------------------------------%
\begin{frame}[fragile]
\frametitle{Dictionary Example (cont)}

First, we need a simple way to determine if two intervals overlap.  
\vspace{2mm}

intervaltree is a python module that makes that easy.

\smallfont
\begin{verbatim}
>>> from intervaltree import IntervalTree
>>> it=IntervalTree()
>>> it[4:7]='I1'
>>> it[5:10]='I2'
>>> it[1:11]='I3'
>>> it
IntervalTree([Interval(1, 11, 'I3'), Interval(4, 7, 'I1'), 
              Interval(5, 10, 'I2')])
>>> it[7]
set([Interval(1, 11, 'I3'), Interval(5, 10, 'I2')])
>>> it[6:8]
set([Interval(4, 7, 'I1'), Interval(1, 11, 'I3'), 
                            Interval(5, 10, 'I2')]) 
\end{verbatim}

We'll use interval trees, one for each chromosome, to store an interval for each gene.
\vspace{2mm}

Then we'll find the overlaps for mapped dna sequences.

\end{frame}

%----------- slide --------------------------------------------------%
\begin{frame}[fragile]
\frametitle{Dictionary Example (calculating overlaps)}

Here is a picture of what we want:

\smallfont
\begin{verbatim}
{'chr1': IntervalTree([Interval(1000, 1100, 'GeneA'), 
                       Interval(2000, 2100, 'GeneB'), ...
 'chr2': IntervalTree([Interval(4000, 5100, 'GeneC'), 
                       Interval(7000, 8100, 'GeneD'), ...
 'chr3':
 ...
}
\end{verbatim}

\end{frame}


%----------- slide --------------------------------------------------%
\begin{frame}[fragile]
\frametitle{Dictionary Example (cont)}
\smallfont
Again, in pseudocode:
\begin{verbatim}
 # create the interval trees
 create empty dict
 open the gene file
 for each line in the file
    get gene name, chrom, start, end
    initialize an intervaltree for the chrom, if needed, and add to dict
    add the interval and gene name to the interval tree

 # use the interval trees to find overlapped genes
 open the dna sequence file
 for each line in the file:
   get chrom, mapped position, and dna seq
   look up the interval tree for that chrom in the dict
   search the interval tree for overlaps [pos, pos+len]
   print out the gene names

\end{verbatim}
\end{frame}

%----------- slide --------------------------------------------------%
\begin{frame}[fragile]
\frametitle{Dictionary Example (cont)}

\smallfont
\begin{verbatim}
import sys
from intervaltree import IntervalTree

print "initializing"
genefinder={}
for line in open(sys.argv[1]):
    genename, chrm, strand, start, end = line.split()[0:5]
    if not chrm in genefinder:
        genefinder[chrm]=IntervalTree()
    genefinder[chrm][int(start):int(end)]=genename

print "reading sequences"
for line in open(sys.argv[2]):
    tag, flag, chrm, pos, mapq, cigar, rnext, 
        pnext, tlen, seq, qual = line.split()[0:11]
    genes=genefinder[chrm][int(pos):int(pos)+len(seq)]
    if genes:
        print tag
        for gene in genes:
            print '\t',gene.data

\end{verbatim}
\end{frame}

%----------- slide --------------------------------------------------%
\begin{frame}[fragile]
\frametitle{Dictionary Example (cont)}

\smallfont
\begin{verbatim}
rdb9@bdn:ruddle2:~ $ python dict_example.py knownGene.txt hits.sam
initializing
reading sequences
HWI-ST0831:196:C1YCJACXX:2:2211:2571:23347
        uc004cqm.3
        uc010nda.3
        uc004cqn.3
HWI-ST0831:196:C1YCJACXX:2:2114:9661:90395
        uc003zbm.3
HWI-ST0831:196:C1YCJACXX:2:2302:16215:62515
        uc003pvj.3
        uc003pvh.3
        uc010kdy.1
\end{verbatim}
\end{frame}

%----------- slide --------------------------------------------------%
\begin{frame}[fragile]
\frametitle{Python Resources we like}

\begin{itemize}
\item \textit{Introducing Python}, Bill Lubanovic, O'Reilly
\item \textit{Python in a Nutshell}, Alex Martelli, O'Reilly
\item \textit{Python Cookbook}, Alex Martelli, O'Reilly
\item Google's python class: https://www.youtube.com/watch?v=tKTZoB2Vjukxo
\item https://docs.python.org/2.7/tutorial
\end{itemize}

\end{frame}

%----------- slide --------------------------------------------------%
\begin{frame}[fragile]
\frametitle{To get help or report problems}
\begin{itemize}
\item Check our status page: \url{http://research.computing.yale.edu/system-status}
\item Send an email to: \url{hpc@yale.edu}
\item Read documentation at: \url{http://research.computing.yale.edu/hpc-support}
\item Email us directly:
\begin{itemize}
\item Stephen.weston@yale.edu, Office hours at CSSSI on Wednesday morning from 9 to 12 or by appointment
\item Robert.bjornson@yale.edu, By appointment
\end{itemize}
\end{itemize}
\end{frame}

%----------- slide --------------------------------------------------%
\begin{frame}[fragile]
\frametitle{When reporting a problem}
It is best to send problem reports to our tracking system: hpc@yale.edu 
\vspace{2mm}

Please include, as applicable:
\begin{itemize}
\item The cluster you're working on
\item The directory you're working in
\item The command you ran, and what happened, in as much detail as you can
\end{itemize}

See our intro to HPC bootcamp presentation:
http://research.computing.yale.edu/hpc-bootcamp

\end{frame}
\end{document}
